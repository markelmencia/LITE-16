SHELL = /bin/sh

# Source and testbench directories
SRC_DIR = src
TEST_DIR = test

# The compiled file
OUT = lite-16_tb.vvp

# Defines all the source files inside the source directory
SRC = $(wildcard $(SRC_DIR)/*.v)

# The testbench that simulates the whole architecture
LITE_16_TESTBENCH = $(TEST_DIR)/lite-16_tb.v


# OPTIONAL COMPILATION PARAMETERS

# If 1, the memory will be defined in full capacity (65536 addresses)
# If 0, the memory will only have 128 addresses
# A full capacity memory compilation will take exponentially longer
FULL_MEM = 0

# Defines the path of the ROM file that will be dumped into the program memory
# This file should include the instructions to be executed
ROM_FILE = test/roms/romtest.hex


# Verilog compilator
IVERILOG = iverilog
# Runtime simulator
VVP = vvp

# Defines the flag parameter structures
FULL_MEM_FLAG = -Plite_16_tb.FULL_MEM=$(FULL_MEM)
ROM_FILE_FLAG = -Plite_16_tb.ROM_FILE=\""$(ROM_FILE)"\"

# Defines the optional flags
FLAGS = $(FULL_MEM_FLAG) $(ROM_FILE_FLAG)

# Compiles the LITE-16 testbench to obtain a .vvp file
$(OUT): $(SRC)
	$(info Compiling sources...)
	$(IVERILOG) -o $(OUT) $(LITE_16_TESTBENCH) $(SRC) $(FLAGS)

# Runs the simulation with vvp
run: $(OUT)
	$(info Running simulation...)
	$(VVP) $(OUT)

# Compiles and runs a testbench specified by the TB variable
# The user must define this variable in the command, e.g. make test TB=test/alu_tb.v
test:
ifeq ($(TB), )
	$(info Target testbench not defined. Define the testbench you want compiled with make TB=<testbech path>. Skipping)
else
	$(info Compiling sources...)
	$(IVERILOG) -o tb_out.vvp $(TB) $(SRC)
	$(info Running simulation...)
	$(VVP) tb_out.vvp
endif

# Executes all targets
all: $(OUT) run test

# Cleans every file generated by the makefile
clean:
	rm -f *.vvp *.vcd

.PHONY: run all test
